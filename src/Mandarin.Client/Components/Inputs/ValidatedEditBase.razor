@using System.Linq.Expressions
@using Bashi.Core.Extensions

@code {
  /// <summary>
  /// Gets or sets the expression referencing the field to be validated.
  /// </summary>
  [Parameter]
  public Expression<Func<object>> For { get; set; }

  /// <summary>
  /// Gets or sets the EditContext of the form that is associated to this TextEdit.
  /// </summary>
  [CascadingParameter]
  public EditContext EditContext { get; set; }

  /// <summary>
  /// Gets or sets whether the input is disabled.
  /// </summary>
  [Parameter]
  public bool Disabled { get; set; }

  /// <summary>
  /// Gets or sets whether the input is readonly.
  /// </summary>
  [Parameter]
  public bool ReadOnly { get; set; }

  /// <summary>
  /// Gets or sets the map of additional parameters to attach to the underlying TextEdit.
  /// </summary>
  [Parameter(CaptureUnmatchedValues = true)]
  public Dictionary<string, object> AdditionalAttributes { get; set; }

  /// <summary>
  /// Validates the component by forwarding any validation messages in the EditContext for the field
  /// described by the <see cref="For"/> expression. Any validation messages indicates the field is
  /// in a failed status.
  /// </summary>
  protected void OnValidate(ValidatorEventArgs e)
  {
    var messages = EditContext.GetValidationMessages(For).NullToEmpty().AsReadOnlyList();
    e.Status = messages.Any() ? ValidationStatus.Error : ValidationStatus.Success;
    e.ErrorText = messages.FirstOrDefault();
  }

}
