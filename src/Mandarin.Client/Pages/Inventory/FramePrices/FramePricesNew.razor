@page "/inventory/frame-prices/new"
@using Mandarin.Inventory
@using System.Reactive.Linq
@using Mandarin.Client.Utils
@inherits ReactiveInjectableComponentBase<IFramePricesNewViewModel>

<Card>
  <CardHeader>
    <CardTitle>New Frame Price</CardTitle>
    <CardActions Float="Float.Right">
      <ReactiveButton ReactiveCommand="@ViewModel!.Save" Color="Color.Primary">Save</ReactiveButton>
      <ReactiveButton ReactiveCommand="@ViewModel!.Cancel" Color="Color.Danger">Cancel</ReactiveButton>
    </CardActions>
  </CardHeader>
  <CardBody>
    @if (ViewModel!.IsLoading)
    {
      <MandarinProgressBar>Loading Data...</MandarinProgressBar>
    }
    else
    {
      <Validations @ref="@validations" EditContext="@EditContext" ValidateOnLoad="false">
        <Validation>
          <Field>
            <FieldLabel>Product</FieldLabel>
            <Autocomplete TItem="Product" Data="@(ViewModel!.Products)" @bind-SelectedValue="@SelectedProduct"
                          Placeholder="Start typing to search..." MinLength="2"
                          TextField="@((Product item) => item.FriendlyString())" ValueField="@((Product item) => item)"
                          Filter="AutocompleteFilter.Contains"/>
          </Field>
        </Validation>
        <ValidatedInstantEdit For="() => FramePrice.CreatedAt" @bind-Date="@FramePrice.CreatedAt" Label="Active From" />
        <Fields>
          <ValidatedNumericEdit For="() => FramePrice.FramePrice" @bind-Value="@FramePrice.FramePrice"
                                ColumnSize="ColumnSize.Is4" Label="Frame Price" AddonLabel="£"
                                Min="@(0M)" Disabled="@(ViewModel!.SelectedProduct == null)"/>
          <ValidatedNumericEdit For="() => FramePrice.RetailPrice" @bind-Value="@FramePrice.RetailPrice"
                                ColumnSize="ColumnSize.Is4" Label="Retail Price" AddonLabel="£"
                                Min="@(0M)" ReadOnly="true" Disabled="true"/>
          <ValidatedNumericEdit For="() => FramePrice.ArtistPrice" Value="@FramePrice.ArtistPrice"
                                ColumnSize="ColumnSize.Is4" Label="Artist Price" AddonLabel="£"
                                Min="@(0M)" ReadOnly="true" Disabled="true"/>
        </Fields>
      </Validations>
    }
  </CardBody>
</Card>

@code {

  private Validations validations;

  private EditContext EditContext { get; set; }
  private IFramePriceViewModel FramePrice => ViewModel!.FramePrice;

  /// <summary>
  /// Gets or sets the selected product.
  /// </summary>
  private object SelectedProduct
  {
    get => ViewModel!.SelectedProduct;
    set => ViewModel!.SelectedProduct = (Product) value;
  }

  /// <inheritdoc />
  protected override async void OnInitialized()
  {
    await ViewModel!.LoadData.Execute();

    EditContext = new EditContext(FramePrice);
    EditContext.SubscribeToViewModel(ViewModel, () => validations.ValidateAll());
  }

}
