@page "/artists"
@using Bashi.Core.Extensions
@using System.Reactive.Linq
@inherits ReactiveInjectableComponentBase<IArtistsIndexViewModel>

<Card>
  <CardHeader>
    <CardTitle>All Artists</CardTitle>
    <CardActions Float="Float.Right">
      <ReactiveButton ReactiveCommand="@ViewModel!.EditSelected" Color="Color.Secondary">Edit</ReactiveButton>
      <ReactiveButton ReactiveCommand="@ViewModel!.CreateNew" Color="Color.Primary">New</ReactiveButton>
    </CardActions>
  </CardHeader>
  <CardBody>
    @if (ViewModel!.IsLoading)
    {
      <MandarinProgressBar>Fetching artists...</MandarinProgressBar>
    }
    else
    {
      <DataGrid TItem="IArtistViewModel" Data="@ViewModel!.Rows" Filterable="true" Striped="true"
                ShowPager="true" PagerPosition="DataGridPagerPosition.Top" PageSize="10"
                Responsive="true"
                RowSelectable="@(_ => true)" @bind-SelectedRow="@ViewModel!.SelectedRow">
        <DataGridColumn TItem="IArtistViewModel" Field="StockistCode" Caption="Code" Width="75px" />
        <DataGridColumn TItem="IArtistViewModel" Field="DisplayName" Caption="Name" TextAlignment="TextAlignment.Right" />
        <DataGridColumn TItem="IArtistViewModel" Field="StatusCode" Caption="Status" TextAlignment="TextAlignment.Right">
          <DisplayTemplate>@context.StatusCode.GetDescription()</DisplayTemplate>
        </DataGridColumn>
      </DataGrid>
    }
  </CardBody>
</Card>

@code {

  /// <inheritdoc />
  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    await ViewModel!.LoadData.Execute();
  }

}
