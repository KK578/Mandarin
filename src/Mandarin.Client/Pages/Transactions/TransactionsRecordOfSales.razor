@page "/transactions/record-of-sales"
@using Mandarin.Commissions
@using Mandarin.Configuration
@using Microsoft.Extensions.Options
@using Mandarin.Client.ViewModels.Commissions
@using Mandarin.Client.ViewModels
@using NodaTime
@inject IOptions<MandarinConfiguration> configuration;
@inject IRecordOfSalesRepository recordOfSalesRepository;
@inject IViewModelFactory viewModelFactory;
@inject IClock clock

<Card Margin="Margin.Is2.FromBottom">
  <CardHeader>
    <CardTitle>Record of Sales - Select Period</CardTitle>
  </CardHeader>
  <CardBody>
    <YearMonthEdit @bind-YearMonth="@SelectedYearMonth" />
    <Alert Color="Color.Info" Visible="true">
      <Text>This will include transactions from <i>@(StartDate)</i> to <i>@(EndDate)</i>.</Text>
    </Alert>
    <CardActions>
      <Button Color="Color.Primary" Clicked="@UpdateTransactionsAsync" Disabled="@IsLoading">Update</Button>
    </CardActions>
  </CardBody>
</Card>

@if (RecordOfSales != null)
{
  <Card Margin="Margin.Is2.FromBottom">
    <CardHeader>
      <CardTitle>Sales by Artist Breakdown @LoadedDateInterval</CardTitle>
    </CardHeader>
    <CardBody>
      <DataGrid Data="@RecordOfSales" Filterable="true" ShowPager="true" PageSize="5" Striped="true" @bind-SelectedRow="@RecordOfSalesModel" Responsive="true">
        <DataGridCheckColumn TItem="IArtistRecordOfSalesViewModel" Field="SendSuccessful" Caption="Sent">
          <DisplayTemplate>
            <Check TValue="bool?" Checked="context.SendSuccessful" Disabled="true" ReadOnly="true" />
          </DisplayTemplate>
        </DataGridCheckColumn>
        <DataGridColumn TItem="IArtistRecordOfSalesViewModel" Field="StatusMessage" Caption="Email Status" />
        <DataGridColumn TItem="IArtistRecordOfSalesViewModel" Field="RecordOfSales.StockistCode" Caption="Artist Code" />
        <DataGridColumn TItem="IArtistRecordOfSalesViewModel" Field="RecordOfSales.Name" Caption="Name" />
        <DataGridColumn TItem="IArtistRecordOfSalesViewModel" Field="RecordOfSales.Rate" Caption="Commission Rate" DisplayFormat="{0:P}" />
        <DataGridColumn TItem="IArtistRecordOfSalesViewModel" Field="RecordOfSales.Subtotal" Caption="Subtotal" DisplayFormat="{0:C}" />
        <DataGridColumn TItem="IArtistRecordOfSalesViewModel" Field="RecordOfSales.CommissionTotal" Caption="Commission" DisplayFormat="{0:C}" />
        <DataGridColumn TItem="IArtistRecordOfSalesViewModel" Field="RecordOfSales.Total" Caption="Total" DisplayFormat="{0:C}" />
      </DataGrid>
    </CardBody>
  </Card>
}

@if (SelectedRecordOfSales != null)
{
  <EditForm Model="@RecordOfSalesModel" OnValidSubmit="RecordOfSalesModel.SendEmailAsync">
    <Card>
      <CardHeader>
        <CardTitle>Sales for @(SelectedRecordOfSales.Name)</CardTitle>
      </CardHeader>
      <CardBody>
        <CardText Alignment="TextAlignment.Left">Subtotal: @($"{SelectedRecordOfSales.Subtotal:C}")</CardText>
        <CardText Alignment="TextAlignment.Left">Commission: @($"{SelectedRecordOfSales.CommissionTotal:C}") (@($"{SelectedRecordOfSales.Rate:P}"))</CardText>
        <CardText Alignment="TextAlignment.Left">Total: @($"{SelectedRecordOfSales.Total:C}")</CardText>

        @if (SelectedRecordOfSales.Sales != null)
        {
          <DataGrid Data="@SelectedRecordOfSales.Sales" ShowPager="true" PageSize="15" Striped="true" RowSelectable="@(_ => false)">
            <DataGridColumn TItem="Sale" Field="ProductCode" Caption="Product Code" />
            <DataGridColumn TItem="Sale" Field="ProductName" Caption="Product Name" />
            <DataGridColumn TItem="Sale" Field="Quantity" Caption="Quantity" />
            <DataGridColumn TItem="Sale" Field="UnitPrice" Caption="Unit Price" DisplayFormat="{0:C}" />
            <DataGridColumn TItem="Sale" Field="Subtotal" Caption="Subtotal" DisplayFormat="{0:C}" />
            <DataGridColumn TItem="Sale" Field="Commission" Caption="Commission" DisplayFormat="{0:C}" />
            <DataGridColumn TItem="Sale" Field="Total" Caption="Total" DisplayFormat="{0:C}" />
          </DataGrid>
        }
        else
        {
          <Alert Visible="true" Color="Color.Secondary">No sales occurred in this period.</Alert>
        }

        <Validations>
          <Validation>
            <Field>
              <FieldLabel>Email Address:</FieldLabel>
              <TextEdit Placeholder="@SelectedRecordOfSales.EmailAddress" Disabled="@(RecordOfSalesModel.SendInProgress || RecordOfSalesModel.SendSuccessful)" @bind-Text="@RecordOfSalesModel.EmailAddress" />
            </Field>
          </Validation>

          <Validation>
            <Field>
              <FieldLabel Float="Float.Left">Custom Message:</FieldLabel>
              <FieldLabel Float="Float.Right">
                <Dropdown RightAligned="true">
                  <DropdownToggle Color="Color.Info">Select a Template...</DropdownToggle>
                  <DropdownMenu>
                    @foreach (var template in configuration.Value.RecordOfSaleMessageTemplates)
                    {
                      <DropdownItem Clicked="@(_ => RecordOfSalesModel.SetMessageFromTemplateAsync(template))">@(template.Name)</DropdownItem>
                    }
                  </DropdownMenu>
                </Dropdown>
              </FieldLabel>
              <MemoEdit Placeholder="Custom Message" Rows="10" Disabled="@(RecordOfSalesModel.SendInProgress || RecordOfSalesModel.SendSuccessful)" @bind-Text="@RecordOfSalesModel.CustomMessage" />
            </Field>
          </Validation>
        </Validations>

        <Alert Visible="@(!string.IsNullOrEmpty(RecordOfSalesModel.StatusMessage))" Color="Color.Secondary">@(RecordOfSalesModel.StatusMessage)</Alert>

        <CardActions Float="Float.Right">
          <Button Clicked="@OnCloseSelectedCommission" Color="Color.Danger">Close</Button>
          <Button Clicked="@RecordOfSalesModel.ToggleSentFlag" Color="Color.Warning">@(RecordOfSalesModel.SendSuccessful ? "Unlock" : "Lock")</Button>
          <Button Type="@ButtonType.Submit" Color="Color.Primary" Disabled="@(RecordOfSalesModel.SendInProgress || RecordOfSalesModel.SendSuccessful)">Submit</Button>
        </CardActions>
      </CardBody>
    </Card>
  </EditForm>
}

@code
{

  private YearMonth SelectedYearMonth { get; set; }
  private LocalDate StartDate => SelectedYearMonth.OnDayOfMonth(1).Minus(Period.FromDays(15));
  private LocalDate EndDate => SelectedYearMonth.OnDayOfMonth(1).PlusMonths(1).Minus(Period.FromDays(15));
  private bool IsLoading { get; set; } = false;

  private DateInterval LoadedDateInterval { get; set; }
  private IList<IArtistRecordOfSalesViewModel> RecordOfSales { get; set; }
  private IArtistRecordOfSalesViewModel recordOfSalesModel;
  private IDisposable subscription;

  private IArtistRecordOfSalesViewModel RecordOfSalesModel
  {
    get => recordOfSalesModel;
    set
    {
      this.subscription?.Dispose();
      this.subscription = null;
      this.recordOfSalesModel = value;

      if (value != null)
      {
        this.subscription = value.StateObservable.Subscribe(x => InvokeAsync(StateHasChanged));
      }
    }
  }

  private RecordOfSales SelectedRecordOfSales => RecordOfSalesModel?.RecordOfSales;

  /// <inheritdoc />
  protected override void OnInitialized()
  {
    SelectedYearMonth = clock.GetCurrentInstant().InUtc().Date.Minus(Period.FromMonths(1)).ToYearMonth();
  }

  private async Task UpdateTransactionsAsync()
  {
    try
    {
      IsLoading = true;

      var dateInterval = new DateInterval(StartDate, EndDate);
      var recordOfSales = await recordOfSalesRepository.GetRecordOfSalesAsync(dateInterval);
      LoadedDateInterval = dateInterval;
      RecordOfSales = recordOfSales.Select(x => viewModelFactory.CreateArtistRecordOfSalesViewModel(x)).ToList();
    }
    finally
    {
      IsLoading = false;
      StateHasChanged();
    }
  }

  private void OnCloseSelectedCommission()
  {
    this.RecordOfSalesModel = null;
  }
}
