@page "/admin/inventory/fixed-commission-amounts"
@using Mandarin.Services
@using System.Reactive.Linq
@using System.Reactive.Threading.Tasks
@using Mandarin.ViewModels
@using Mandarin.ViewModels.Commissions
@using System.Reactive.Disposables
@using Mandarin.Models.Commissions
@using Mandarin.Models.Inventory
@inject IInventoryService InventoryService;
@inject IViewModelFactory ViewModelFactory;

<Card>
  <CardHeader>
    <CardTitle>Show Fixed Commission Amounts</CardTitle>
  </CardHeader>
  <CardBody>
    <DataGrid TItem="FixedCommissionRowModel" Data="@fixedCommissionAmountViewModels" Filterable="true" ShowPager="true" PageSize="15" Striped="true"
              Editable="true" EditMode="DataGridEditMode.Inline" RowSelectable="@(_ => false)"
              RowInserted="@AddNewCommission"
              RowUpdated="@UpdateFixedCommission"
              RowRemoved="DeleteCommission">
      <DataGridColumn TItem="FixedCommissionRowModel" Field="ProductCode" Caption="Product Code" Editable="true" TextAlignment="TextAlignment.Left">
        <EditTemplate>
          @if (fixedCommissionAmountViewModels.Any(x => !string.Equals(x.ProductCode, context.CellValue)))
          {
            <Autocomplete Data="products" TextField="@((Product item) => item.ToString())" ValueField="@((item) => item.ProductCode)" MinLength="2"
                          Filter="AutocompleteFilter.Contains"
                          @bind-SelectedValue="@(context.CellValue)" />
          }
          else
          {
            @(context.CellValue)
          }
        </EditTemplate>
      </DataGridColumn>
      <DataGridNumericColumn TItem="FixedCommissionRowModel" Field="Amount" Caption="Amount" DisplayFormat="{0:C}" Width="150px" Editable="true" TextAlignment="TextAlignment.Right"/>
      <DataGridCommandColumn TItem="FixedCommissionRowModel" Width="125px" TextAlignment="TextAlignment.Right">
        <DeleteCommandTemplate>
          <Button Clicked="@context.Clicked"><Icon Name="IconName.Delete" /></Button>
        </DeleteCommandTemplate>
        <ClearFilterCommandTemplate>
          <Button Clicked="@context.Clicked"><Icon Name="IconName.Clear" /></Button>
        </ClearFilterCommandTemplate>
        <NewCommandTemplate>
          <Button Clicked="@context.Clicked"><Icon Name="IconName.Add" /></Button>
        </NewCommandTemplate>
        <EditCommandTemplate>
          <Button Clicked="@context.Clicked"><Icon Name="IconName.Edit" /></Button>
        </EditCommandTemplate>
        <SaveCommandTemplate>
          <Button Clicked="@context.Clicked"><Icon Name="IconName.Save" /></Button>
        </SaveCommandTemplate>
        <CancelCommandTemplate>
          <Button Clicked="@context.Clicked"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.TimesCircle" /></Button>
        </CancelCommandTemplate>
      </DataGridCommandColumn>
    </DataGrid>
  </CardBody>
</Card>

@code
{
  private class FixedCommissionRowModel
  {
    public string ProductCode { get; set; }
    public decimal Amount { get; set; }
  }

  private IList<FixedCommissionRowModel> fixedCommissionAmountViewModels = new List<FixedCommissionRowModel>();
  private IList<Product> products = new List<Product>();

  /// <inheritdoc />
  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    fixedCommissionAmountViewModels = await InventoryService.GetFixedCommissionAmounts()
                                                            .Select(x => new FixedCommissionRowModel { ProductCode = x.ProductCode, Amount = x.Amount })
                                                            .ToList()
                                                            .ToTask();
    products = await InventoryService.GetInventory().ToList().ToTask();
  }

  private Task AddNewCommission(SavedRowItem<FixedCommissionRowModel, Dictionary<string, object>> model)
  {
    var insert = new FixedCommissionAmount(model.Item.ProductCode, model.Item.Amount);
    return InventoryService.AddFixedCommissionAmount(insert);
  }

  private Task UpdateFixedCommission(SavedRowItem<FixedCommissionRowModel, Dictionary<string, object>> model)
  {
    var update = new FixedCommissionAmount(model.Item.ProductCode, model.Item.Amount);
    return InventoryService.UpdateFixedCommissionAmount(update);
  }

  private Task DeleteCommission(FixedCommissionRowModel arg)
  {
    return InventoryService.DeleteFixedCommissionAmount(arg.ProductCode);
    throw new NotImplementedException();
  }
}
