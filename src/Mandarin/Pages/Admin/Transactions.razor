@page "/admin/transactions"
@using Mandarin.Services
@using System.Reactive.Linq
@using System.Reactive.Threading.Tasks
@using Square.Models
@inject ITransactionService TransactionService;

<EditForm EditContext="@EditContext">
  <RadzenDatePicker @bind-Value="StartDate" DateFormat="d" />
  <RadzenDatePicker @bind-Value="EndDate" DateFormat="d" />

  <RadzenButton Click="UpdateTransactionsAsync" disabled="@IsLoading">Update</RadzenButton>
</EditForm>

<RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="15"
            AllowSorting="true" Data="@AllTransactions" ColumnWidth="200px" Value="@SelectedTransaction" RowSelect="@((Order order) => OnSelect(order))">
  <Columns>
    <RadzenGridColumn TItem="Order" Property="Id" Title="Square Transaction Id" />
    <RadzenGridColumn TItem="Order" Property="UpdatedAt" Title="Transaction Time">
      <Template Context="data">@($"{DateTime.Parse(data.UpdatedAt):F}")</Template>
    </RadzenGridColumn>
    <RadzenGridColumn TItem="Order" Property="TotalDiscountMoney" Title="Discounts">
      <Template Context="data">@($"{-1 * data.TotalDiscountMoney.Amount / 100.0:C}")</Template>
    </RadzenGridColumn>
    <RadzenGridColumn TItem="Order" Property="TotalMoney" Title="Total Amount">
      <Template Context="data">@($"{data.TotalMoney.Amount / 100.0:C}")</Template>
    </RadzenGridColumn>
  </Columns>
</RadzenGrid>

@if (SelectedTransaction?.LineItems != null)
{
  <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="15"
              AllowSorting="true" Data="@SelectedTransaction.LineItems" ColumnWidth="200px">
    <Columns>
      <RadzenGridColumn TItem="OrderLineItem" Property="Name" Title="Name" />
      <RadzenGridColumn TItem="OrderLineItem" Property="BasePriceMoney" Title="Unit Price">
        <Template Context="data">@($"{data.BasePriceMoney.Amount / 100.0:C}")</Template>
      </RadzenGridColumn>
      <RadzenGridColumn TItem="OrderLineItem" Property="Quantity" Title="Quantity" />
      <RadzenGridColumn TItem="OrderLineItem" Property="TotalMoney" Title="Subtotal">
        <Template Context="data">@($"{data.TotalMoney.Amount / 100.0:C}")</Template>
      </RadzenGridColumn>
    </Columns>
  </RadzenGrid>
}

@if (SelectedTransaction?.Discounts != null)
{
  <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="15"
              AllowSorting="true" Data="@SelectedTransaction.Discounts" ColumnWidth="200px">
    <Columns>
      <RadzenGridColumn TItem="OrderLineItemDiscount" Property="Name" Title="Name" />
      <RadzenGridColumn TItem="OrderLineItemDiscount" Property="AmountMoney" Title="Discount Amount">
        <Template Context="data">@($"{data.AmountMoney.Amount / 100.0:C}")</Template>
      </RadzenGridColumn>
    </Columns>
  </RadzenGrid>
}

@code
{
  private bool IsLoading { get; set; } = false;
  private IList<Order> AllTransactions { get; set; } = new List<Order>();
  private Order SelectedTransaction { get; set; } = null;

  private EditContext EditContext { get; set; }
  private DateTime StartDate { get; set; } = DateTime.Today.AddDays(-1);
  private DateTime EndDate { get; set; } = DateTime.Today;

  protected override void OnInitialized()
  {
    EditContext = new EditContext(this);
  }

  private async Task UpdateTransactionsAsync()
  {
    try
    {
      IsLoading = true;
      AllTransactions = await TransactionService.GetAllTransactions(StartDate, EndDate)
                                                .ToList()
                                                .ToTask();
    }
    finally
    {
      IsLoading = false;
      StateHasChanged();
    }
  }

  private Task OnSelect(Order order)
  {
    this.SelectedTransaction = order;
    return Task.CompletedTask;
  }

}
