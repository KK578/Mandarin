@page "/admin/transactions"
@using Mandarin.Services
@using System.Reactive.Linq
@using System.Reactive.Threading.Tasks
@using Mandarin.Models.Transactions
@inject ITransactionService TransactionService;

<RadzenCard>
  <EditForm EditContext="@EditContext">
    <RadzenDatePicker @bind-Value="StartDate" DateFormat="d" />
    <RadzenDatePicker @bind-Value="EndDate" DateFormat="d" />

    <RadzenButton Click="UpdateTransactionsAsync" disabled="@IsLoading">Update</RadzenButton>
  </EditForm>
</RadzenCard>

<RadzenCard>
  <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="15"
              AllowSorting="true" Data="@AllTransactions" ColumnWidth="200px" Value="@SelectedTransaction" RowSelect="@((Transaction transaction) => OnSelect(transaction))">
    <Columns>
      <RadzenGridColumn TItem="Transaction" Property="Timestamp" Title="Transaction Time">
        <Template Context="data">@($"{data.Timestamp:F}")</Template>
      </RadzenGridColumn>
      <RadzenGridColumn TItem="Transaction" Property="TotalMoney" Title="Total Amount">
        <Template Context="data">@($"{data.TotalAmount:C}")</Template>
      </RadzenGridColumn>
    </Columns>
  </RadzenGrid>
</RadzenCard>

@if (SelectedTransaction?.Subtransactions != null)
{
  <RadzenCard>
    <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="15"
                AllowSorting="true" Data="@SelectedTransaction.Subtransactions" ColumnWidth="200px">
      <Columns>
        <RadzenGridColumn TItem="Subtransaction" Property="Product.ProductCode" Title="Product Code" />
        <RadzenGridColumn TItem="Subtransaction" Property="Product.ProductName" Title="Name" />
        <RadzenGridColumn TItem="Subtransaction" Property="TransactionUnitPrice" Title="Unit Price">
          <Template Context="data">@($"{data.TransactionUnitPrice:C}")</Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Subtransaction" Property="Quantity" Title="Quantity" />
        <RadzenGridColumn TItem="Subtransaction" Property="Subtotal" Title="Subtotal">
          <Template Context="data">@($"{data.Subtotal:C}")</Template>
        </RadzenGridColumn>
      </Columns>
    </RadzenGrid>
  </RadzenCard>
}

@code
{
  private bool IsLoading { get; set; } = false;
  private IList<Transaction> AllTransactions { get; set; } = new List<Transaction>();
  private Transaction SelectedTransaction { get; set; } = null;

  private EditContext EditContext { get; set; }
  private DateTime StartDate { get; set; } = DateTime.Today.AddDays(-1);
  private DateTime EndDate { get; set; } = DateTime.Today;

  /// <inheritdoc />
  protected override void OnInitialized()
  {
    EditContext = new EditContext(this);
  }

  private async Task UpdateTransactionsAsync()
  {
    try
    {
      IsLoading = true;
      AllTransactions = await TransactionService.GetAllTransactions(StartDate, EndDate)
                                                .ToList()
                                                .ToTask();
    }
    finally
    {
      IsLoading = false;
      StateHasChanged();
    }
  }

  private Task OnSelect(Transaction transaction)
  {
    this.SelectedTransaction = transaction;
    return Task.CompletedTask;
  }

}
