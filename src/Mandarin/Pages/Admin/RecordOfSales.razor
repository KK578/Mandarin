@page "/admin/record-of-sales"
@using Mandarin.Services
@using System.Reactive.Linq
@using System.Reactive.Threading.Tasks
@using Mandarin.Models.Commissions
@inject ICommissionService CommissionService;
@inject IEmailService EmailService;

<RadzenCard>
  <EditForm EditContext="@DatePickerEditContext">
    <div class="flex flex-row">
      <div class="flex-col flex-grow">
        <RadzenDatePicker @bind-Value="SelectedDate" DateFormat="MMM yyyy" />
        <RadzenButton class="mt-2" Click="UpdateTransactionsAsync" disabled="@IsLoading">Update</RadzenButton>
      </div>
      <div class="self-center flex-grow">
        <span>This will include transactions from <i>@($"{StartDate:d}")</i> to <i>@($"{EndDate:d}")</i>.</span>
      </div>
    </div>
  </EditForm>
</RadzenCard>

<RadzenCard>
  <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="5"
              AllowSorting="true" Data="@Commissions" ColumnWidth="200px" Value="@RecordOfSalesModel" RowSelect="@((ArtistRecordOfSalesModel model) => OnSelect(model))">
    <Columns>
      <RadzenGridColumn TItem="ArtistRecordOfSalesModel" Property="SendSuccessful" Title="Sent">
        <Template Context="data">
          @if (data.SendSuccessful == true)
          {
            <RadzenIcon Icon="check" />
          }
          else
          {
            <RadzenIcon Icon="close" />
          }
        </Template>
      </RadzenGridColumn>
      <RadzenGridColumn TItem="ArtistRecordOfSalesModel" Property="Commission.StockistCode" Title="Artist Code" />
      <RadzenGridColumn TItem="ArtistRecordOfSalesModel" Property="Commission.Name" Title="Name" />
      <RadzenGridColumn TItem="ArtistRecordOfSalesModel" Property="Commission.Rate" Title="Commission Rate" FormatString="{0:P}" />
      <RadzenGridColumn TItem="ArtistRecordOfSalesModel" Property="Commission.Subtotal" Title="Subtotal" FormatString="{0:C}" />
      <RadzenGridColumn TItem="ArtistRecordOfSalesModel" Property="Commission.CommissionTotal" Title="Commission" FormatString="{0:C}" />
      <RadzenGridColumn TItem="ArtistRecordOfSalesModel" Property="Commission.Total" Title="Total" FormatString="{0:C}" />
    </Columns>
  </RadzenGrid>
</RadzenCard>

@if (SelectedCommission != null)
{
  <RadzenCard>
    <div class="text-left">
      <h3>Record of Sale for @(SelectedCommission.Name)</h3>
      <p>Subtotal: @($"{SelectedCommission.Subtotal:C}")</p>
      <p>Commission: @($"{SelectedCommission.CommissionTotal:C}") (@($"{SelectedCommission.Rate:P}"))</p>
      <p>Total: @($"{SelectedCommission.Total:C}")</p>
    </div>

    @if (SelectedCommission.Sales != null)
    {
      <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="15"
                  AllowSorting="true" Data="@SelectedCommission.Sales" ColumnWidth="200px">
        <Columns>
          <RadzenGridColumn TItem="Sale" Property="ProductCode" Title="Product Code" />
          <RadzenGridColumn TItem="Sale" Property="ProductName" Title="Product Name" />
          <RadzenGridColumn TItem="Sale" Property="Quantity" Title="Quantity" />
          <RadzenGridColumn TItem="Sale" Property="UnitPrice" Title="Unit Price" FormatString="{0:C}" />
          <RadzenGridColumn TItem="Sale" Property="Subtotal" Title="Subtotal" FormatString="{0:C}" />
          <RadzenGridColumn TItem="Sale" Property="Commission" Title="Commission" FormatString="{0:C}" />
          <RadzenGridColumn TItem="Sale" Property="Total" Title="Total" FormatString="{0:C}" />
        </Columns>
      </RadzenGrid>
    }
    else
    {
      <div>No sales occurred in this period.</div>
    }

    <EditForm class="flex flex-col" Model="@RecordOfSalesModel" OnValidSubmit="SendEmailAsync">
      <div class="mt-5 grid grid-cols-3 gap-4">
        <RadzenLabel class="self-center" Text="Email Address:" />
        <RadzenTextBox class="col-span-2" Placeholder="@SelectedCommission.EmailAddress" @bind-Value="@RecordOfSalesModel.EmailAddress" />

        <RadzenLabel class="self-center" Text="Custom Message:" />
        <RadzenTextArea class="col-span-2" Placeholder="Custom Message" Cols="30" Rows="7" @bind-Value="@RecordOfSalesModel.CustomMessage" />

        <div class="col-span-2">
          @if (RecordOfSalesModel.StatusMessage != null)
          {
            <span>@(RecordOfSalesModel.StatusMessage)</span>
          }
        </div>
        <RadzenButton ButtonType="ButtonType.Submit" Disabled="@IsLoading">Submit</RadzenButton>
      </div>
    </EditForm>
  </RadzenCard>
}

@code
{
  private bool IsLoading { get; set; } = false;
  private IList<ArtistRecordOfSalesModel> Commissions { get; set; } = new List<ArtistRecordOfSalesModel>();

  private EditContext DatePickerEditContext { get; set; }
  private DateTime SelectedDate { get; set; } = DateTime.Today;

  private DateTime SelectedMonth => new DateTime(SelectedDate.Year, SelectedDate.Month, 1);
  private DateTime StartDate => SelectedMonth.AddDays(-15);
  private DateTime EndDate => SelectedMonth.AddMonths(1).AddDays(-15).AddHours(-1);

  private ArtistRecordOfSalesModel RecordOfSalesModel { get; set; }
  private ArtistSales SelectedCommission => RecordOfSalesModel?.Commission;

  protected override void OnInitialized()
  {
    DatePickerEditContext = new EditContext(this);
  }

  private async Task UpdateTransactionsAsync()
  {
    try
    {
      IsLoading = true;
      Commissions = await CommissionService.GetSalesByArtistForPeriod(StartDate, EndDate)
                                           .Select(x => new ArtistRecordOfSalesModel(x))
                                           .ToList()
                                           .ToTask();
    }
    finally
    {
      IsLoading = false;
      StateHasChanged();
    }
  }

  private Task OnSelect(ArtistRecordOfSalesModel model)
  {
    this.RecordOfSalesModel = model;
    return Task.CompletedTask;
  }

  public async Task SendEmailAsync()
  {
    try
    {
      IsLoading = true;
      RecordOfSalesModel.SendSuccessful = false;
      RecordOfSalesModel.StatusMessage = null;
      var email = EmailService.BuildRecordOfSalesEmail(RecordOfSalesModel);
      await EmailService.SendEmailAsync(email);
      RecordOfSalesModel.SendSuccessful = true;
      RecordOfSalesModel.StatusMessage = $"Successfully sent to {RecordOfSalesModel.EmailAddress ?? RecordOfSalesModel.Commission.EmailAddress}";
    }
    catch (Exception ex)
    {
      RecordOfSalesModel.SendSuccessful = false;
      RecordOfSalesModel.StatusMessage = ex.Message;
    }
    finally
    {
      IsLoading = false;
    }
  }

}
