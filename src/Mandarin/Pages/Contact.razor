@page "/contact"
@using Mandarin.Services.Email
@using Mandarin.Models
@using System.Reflection
@using System.ComponentModel
@inject IEmailService EmailService;

@if (submitSuccessful)
{
  <MandarinText>Thank you for your message!</MandarinText>
}
else
{
  <MandarinText>Feel free to contact us through this form and we will get back to you as soon as we can.</MandarinText>

  <EditForm Model="@model" class="mx-auto w-4/5" OnValidSubmit="Submit">
    <DataAnnotationsValidator />

    <div class="mt-3 text-left">
      <label class="text-grey-normal" for="name">Name</label>
      <InputText class="@Contact.InputClass" id="name" placeholder="Your name..." @bind-Value="model.Name" />
      <ValidationMessage class="text-grey-medium" For="@(() => model.Name)" />
    </div>
    <div class="mt-3 text-left">
      <label class="text-grey-normal" for="email">Email</label>
      <InputText class="@Contact.InputClass" id="email" placeholder="Your email..." @bind-Value="model.Email" />
      <ValidationMessage For="@(() => model.Email)" />
    </div>
    <div class="mt-3 text-left">
      <label class="text-grey-normal" for="reason">Reason</label>
      <InputSelect class="@Contact.InputClass" id="reason" placeholder="Reason for contacting us..." @bind-Value="model.Reason">
        @foreach (var value in Enum.GetValues(typeof(ContactReasonType)).Cast<ContactReasonType>())
        {
          <option value="@value">@Contact.GetDescription(value)</option>
        }
      </InputSelect>
      <ValidationMessage For="@(() => model.Reason)" />
    </div>
    @if (model.Reason == ContactReasonType.Other)
    {
      <div class="mt-3 text-left">
        <label class="text-grey-normal" for="other-reason">Other Reason</label>
        <InputText class="@Contact.InputClass" id="other-reason" placeholder="Other reason..." @bind-Value="model.AdditionalReason" />
        <ValidationMessage For="@(() => model.AdditionalReason)" />
      </div>
    }
    <div class="mt-3 text-left">
      <label class="text-grey-normal" for="comment">Comment</label>
      <InputTextArea class="@Contact.InputClass" id="comment" placeholder="Your comment here." @bind-Value="model.Comment" />
      <ValidationMessage For="@(() => model.Comment)" />
    </div>

    <div class="mt-3 text-left">
      @if (submitException != null)
      {
        <MandarinText>Sorry something went wrong... Try again in a moment.</MandarinText>
      }
      <button class="bg-gold duration-200 ease-in-out focus:outline-none focus:shadow-outline font-bold hover:opacity-75 px-4 py-2 rounded text-white transition-opacity"
              type="submit">
        Submit
      </button>
    </div>

  </EditForm>
}

@code
{
  private const string InputClass = "appearance-none border-2 border-grey-light focus:border-gold focus:outline-none focus:bg-white bg-grey-light transition-colors duration-200 ease-in-out leading-tight px-4 py-2 rounded text-grey-medium w-full";
  private readonly ContactDetailsModel model = new ContactDetailsModel();

  private bool submitSuccessful;
  private Exception submitException;

  private async Task Submit()
  {
    try
    {
      var response = await EmailService.SendEmailAsync();
      if (response.IsSuccess)
      {
        submitSuccessful = true;
      }
    }
    catch (Exception ex)
    {
      submitException = ex;
    }
  }

  private static string GetDescription(ContactReasonType value)
  {
    var type = typeof(ContactReasonType);
    var enumName = Enum.GetName(typeof(ContactReasonType), value);
    if (enumName == null)
      return value.ToString();

    var member = type.GetMember(enumName).FirstOrDefault();
    var attribute = member?.GetCustomAttribute<DescriptionAttribute>();
    if (attribute == null)
      return value.ToString();

    return attribute.Description;
  }
}
