@page "/fetchdata"
@using Mandarin.Models.Artists
@using System.Net.Http.Headers
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject IAccessTokenProvider AccessTokenProvider
@attribute [Authorize]

<h1>Fetch Data PoC</h1>
<p>This component demonstrates fetching data from the server.</p>

@if (stockists == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <table class="table">
    <thead>
    <tr>
      <th>Code</th>
      <th>First Name</th>
      <th>Last Name</th>
      <th>Display Name</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var stockist in stockists)
    {
      <tr>
        <td>@stockist.StockistCode</td>
        <td>@stockist.FirstName</td>
        <td>@stockist.LastName</td>
        <td>@stockist.Details.FullDisplayName</td>
      </tr>
    }
    </tbody>
  </table>
}

@code {

  private static readonly JsonSerializerOptions JsonSerializationOptions = new()
  {
    ReferenceHandler = ReferenceHandler.Preserve,
    PropertyNameCaseInsensitive = true,
    Converters = { new JsonStringEnumConverter() }
  };

  private List<Stockist> stockists;

  /// <inheritdoc />
  protected override async Task OnInitializedAsync()
  {
    var request = new HttpRequestMessage(HttpMethod.Get, "api/stockists");
    var tokenResult = await AccessTokenProvider.RequestAccessToken();
    if (tokenResult.TryGetToken(out var token))
    {
      request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
      var response = await Http.SendAsync(request);
      stockists = await response.Content.ReadFromJsonAsync<List<Stockist>>(FetchData.JsonSerializationOptions);
    }
  }

}
