@page "/stockists/new"
@using Mandarin.Services
@using Mandarin.Models.Artists
@using Bashi.Core.Extensions
@using Bashi.Core.Utils
@using Mandarin.Models.Commissions
@using Mandarin.Models.Common
@inject IArtistService ArtistService;
@inject NavigationManager NavigationManager;
@inherits MandarinPageBase<IStockistsNewPageViewModel>

<Card>
  <CardHeader>
    <CardTitle>New Artist</CardTitle>
    <CardActions Float="Float.Right">
      <Button Color="Color.Primary" Clicked="OnSaveClicked">Save</Button>
      <CommandButton Command="ViewModel.CloseCommand" Color="Color.Danger">Cancel</CommandButton>
    </CardActions>
  </CardHeader>
  <CardBody>
    @if (Stockist == null)
    {
      <MandarinProgressBar>Just a moment...</MandarinProgressBar>
    }
    else
    {
      <Validations @ref="validations" Mode="ValidationMode.Auto" Model="@Stockist" ValidateOnLoad="false">
        <Validation>
          <Field>
            <FieldLabel>Artist Code</FieldLabel>
            <TextEdit @bind-Text="@Stockist.StockistCode">
              <Feedback><ValidationError /></Feedback>
            </TextEdit>
          </Field>
        </Validation>

        <Fields>
          <Validation>
            <Field ColumnSize="ColumnSize.Is6">
              <FieldLabel>First Name</FieldLabel>
              <TextEdit @bind-Text="@Stockist.FirstName">
                <Feedback><ValidationError /></Feedback>
              </TextEdit>
            </Field>
          </Validation>
          <Validation>
            <Field ColumnSize="ColumnSize.Is6">
              <FieldLabel>Last Name</FieldLabel>
              <TextEdit @bind-Text="@Stockist.LastName">
                <Feedback><ValidationError /></Feedback>
              </TextEdit>
            </Field>
          </Validation>
        </Fields>

        <Validation>
          <Field>
            <FieldLabel>Email Address</FieldLabel>
            <TextEdit Role="@TextRole.Email" @bind-Text="@Stockist.Details.EmailAddress">
              <Feedback><ValidationError /></Feedback>
            </TextEdit>
          </Field>
        </Validation>

        <Validation>
          <Field>
            <FieldLabel>Status</FieldLabel>
            <Select TValue="StatusMode" @bind-SelectedValue="@Stockist.StatusCode">
              <ChildContent>
                @foreach (var status in EnumUtil.GetValues<StatusMode>().Except(new[] { StatusMode.Unknown }))
                {
                  <SelectItem Value="@status">@(status.GetDescription())</SelectItem>
                }
              </ChildContent>
              <Feedback><ValidationError /></Feedback>
            </Select>
          </Field>
        </Validation>

        <Divider />

        <FieldLabel>Artists Page Details</FieldLabel>

        <Validation>
          <Field>
            <FieldLabel>Grid Display Name</FieldLabel>
            <TextEdit @bind-Text="@Stockist.Details.ShortDisplayName">
              <Feedback><ValidationError /></Feedback>
            </TextEdit>
          </Field>
        </Validation>

        <Validation>
          <Field>
            <FieldLabel>Banner Display Name</FieldLabel>
            <TextEdit @bind-Text="@Stockist.Details.FullDisplayName">
              <Feedback><ValidationError /></Feedback>
            </TextEdit>
          </Field>
        </Validation>

        <Validation>
          <Field>
            <FieldLabel>Description</FieldLabel>
            <MemoEdit @bind-Text="@Stockist.Details.Description" Rows="5" Disabled="@(!StockistIsDisplayed)">
              <Feedback><ValidationError /></Feedback>
            </MemoEdit>
          </Field>
        </Validation>

        <Validation>
          <Field>
            <Addons>
              <Addon AddonType="AddonType.Start">
                <AddonLabel Class="w-12"><Icon IconStyle="IconStyle.Light" Class="fab" Name="@("fa-twitter")" /></AddonLabel>
              </Addon>
              <Addon AddonType="AddonType.Body">
                <TextEdit @bind-Text="@Stockist.Details.TwitterHandle" Placeholder="Twitter Handle" Disabled="@(!StockistIsDisplayed)">
                  <Feedback><ValidationError /></Feedback>
                </TextEdit>
              </Addon>
            </Addons>
          </Field>
        </Validation>
        <Validation>
          <Field>
            <Addons>
              <Addon AddonType="AddonType.Start">
                <AddonLabel Class="w-12"><Icon IconStyle="IconStyle.Light" Class="fab" Name="@("fa-facebook")" /></AddonLabel>
              </Addon>
              <Addon AddonType="AddonType.Body">
                <TextEdit @bind-Text="@Stockist.Details.FacebookHandle" Placeholder="Facebook Handle" Disabled="@(!StockistIsDisplayed)">
                  <Feedback><ValidationError /></Feedback>
                </TextEdit>
              </Addon>
            </Addons>
          </Field>
        </Validation>
        <Validation>
          <Field>
            <Addons>
              <Addon AddonType="AddonType.Start">
                <AddonLabel Class="w-12"><Icon IconStyle="IconStyle.Light" Class="fab" Name="@("fa-instagram")" /></AddonLabel>
              </Addon>
              <Addon AddonType="AddonType.Body">
                <TextEdit @bind-Text="@Stockist.Details.InstagramHandle" Placeholder="Instagram Handle" Disabled="@(!StockistIsDisplayed)">
                  <Feedback><ValidationError /></Feedback>
                </TextEdit>
              </Addon>
            </Addons>
          </Field>
        </Validation>
        <Validation>
          <Field>
            <Addons>
              <Addon AddonType="AddonType.Start">
                <AddonLabel Class="w-12"><Icon IconStyle="IconStyle.Light" Class="fab" Name="@("fa-tumblr")" /></AddonLabel>
              </Addon>
              <Addon AddonType="AddonType.Body">
                <TextEdit @bind-Text="@Stockist.Details.TumblrHandle" Placeholder="Tumblr Handle" Disabled="@(!StockistIsDisplayed)">
                  <Feedback><ValidationError /></Feedback>
                </TextEdit>
              </Addon>
            </Addons>
          </Field>
        </Validation>
        <Validation>
          <Field>
            <Addons>
              <Addon AddonType="AddonType.Start">
                <AddonLabel Class="w-12"><Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.GlobeEurope" /></AddonLabel>
              </Addon>
              <Addon AddonType="AddonType.Body">
                <TextEdit @bind-Text="@Stockist.Details.WebsiteUrl" Placeholder="Personal Website" Disabled="@(!StockistIsDisplayed)">
                  <Feedback><ValidationError /></Feedback>
                </TextEdit>
              </Addon>
            </Addons>
          </Field>
        </Validation>

        <Divider />

        <FieldLabel>Commission</FieldLabel>
        <Validation>
          <Field>
            <Addons>
              <Addon AddonType="AddonType.Start">
                <AddonLabel Class="w-12">%</AddonLabel>
              </Addon>
              <Addon AddonType="AddonType.Body">
                <Select TValue="int?" SelectedValue="@Commission.RateGroupId" SelectedValueChanged="@OnRateGroupSelected">
                  @foreach (var group in ViewModel.CommissionRateGroups)
                  {
                    <SelectItem TValue="int?" Value="@(group.GroupId)">@(group.Rate)%</SelectItem>
                  }
                </Select>
              </Addon>
            </Addons>
          </Field>
        </Validation>
        <Validation>
          <Fields>
            <Field ColumnSize="ColumnSize.Is6">
              <FieldLabel>Start Date</FieldLabel>
              <DateEdit TValue="DateTime" @bind-Date="@Commission.StartDate" />
            </Field>
            <Field ColumnSize="ColumnSize.Is6">
              <FieldLabel>End Date</FieldLabel>
              <DateEdit TValue="DateTime" @bind-Date="@Commission.EndDate" />
            </Field>
          </Fields>
        </Validation>
      </Validations>
    }
  </CardBody>
</Card>

@code
{
  private Stockist Stockist => ViewModel.Stockist;
  private Commission Commission => Stockist.Commissions.Last();
  private bool StockistIsDisplayed => Stockist.StatusCode == StatusMode.Active;

  private Validations validations;

  private async Task OnSaveClicked()
  {
    if (!validations.ValidateAll())
    {
      return;
    }

    await ViewModel.SubmitCommand.ExecuteAsync();
  }

  private void OnRateGroupSelected(int? selectedId)
  {
    var value = ViewModel.CommissionRateGroups.FirstOrDefault(group => group.GroupId == selectedId) ?? ViewModel.CommissionRateGroups[0];
    Commission.RateGroup = value;
    Commission.RateGroupId = value.GroupId;

    StateHasChanged();
  }

}
