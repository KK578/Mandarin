name: Build

on:
  push:
  pull_request:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: "[Setup] Checkout Repository"
        uses: actions/checkout@v1

      - name: "[Setup] Ensure 'master' branch exists"
        run: |
          git fetch --tags
          git branch --create-reflog master origin/master

      - name: "[Setup] Create GitVersion"
        uses: docker://gittools/gitversion:5.1.3-linux-netcoreapp2.1
        with:
          args: /github/workspace /nofetch /exec /bin/sh /execargs "-c \"echo $GitVersion_FullSemVer > /github/workspace/version.txt\"

      - name: "[Setup] Install .NET Core"
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.101

      - name: "[Setup] Install node"
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: "[Setup] Install gulp"
        run: npm install -g gulp-cli

      - name: "[Coverage] Instrument with Sonar"
        env:
          SONARCLOUD_LOGIN: ${{ secrets.SONARCLOUD_LOGIN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 4.8.0
          ~/.dotnet/tools/dotnet-sonarscanner begin \
            /k:"KK578_Mandarin" \
            /o:"kk578" \
            /d:sonar.login="$SONARCLOUD_LOGIN" \
            /d:sonar.host.url=https://sonarcloud.io \
            /d:sonar.cs.opencover.reportsPaths="coverage/coverage.opencover.xml" \
            /d:sonar.cs.nunit.reportsPaths="test/*/TestResults/TestResults.xml" \
            /v:$GitVersion_FullSemVer

      - name: "[Build] npm install"
        working-directory: src/Mandarin/
        run: npm install

      - name: "[Build] Build css"
        working-directory: src/Mandarin/
        run: gulp css

      - name: "[Build] NuGet Restore"
        run: dotnet restore

      - name: "[Build] Build Solution"
        run: |
          dotnet build \
            --no-restore \
            --configuration Release \
            /p:VersionPrefix=$GitVersion_MajorMinorPatch \
            /p:VersionSuffix=$GitVersion_PreReleaseLabel \
            /p:AssemblyVersion=$GitVersion_AssemblySemVer \
            /p:FileVersion=$GitVersion_AssemblySemFileVer \
            /p:InformationalVersion=$GitVersion_InformationalVersion \
            /p:RepositoryBranch=${GITHUB_REF#refs/heads/} \
            /p:RepositoryCommit=$GITHUB_SHA

      - name: "[Test] Run Tests"
        run: |
          dotnet test --configuration Release --no-build test/Mandarin.ViewModels.Tests/Mandarin.ViewModels.Tests.csproj
          dotnet test --configuration Release --no-build test/Mandarin.Tests/Mandarin.Tests.csproj

      - name: "[Deploy] Publish build"
        run: |
          dotnet publish src/Mandarin/Mandarin.csproj \
            --output publish \
            --no-restore \
            --configuration Release \
            /p:VersionPrefix=$GitVersion_MajorMinorPatch \
            /p:VersionSuffix=$GitVersion_PreReleaseLabel \
            /p:AssemblyVersion=$GitVersion_AssemblySemVer \
            /p:FileVersion=$GitVersion_AssemblySemFileVer \
            /p:InformationalVersion=$GitVersion_InformationalVersion \
            /p:RepositoryBranch=${GITHUB_REF#refs/heads/} \
            /p:RepositoryCommit=$GITHUB_SHA
          echo $GitVersion_NuGetVersionV2 > publish/Version.txt

      - name: "[Deploy] Upload build artifact"
        uses: actions/upload-artifact@v1
        with:
          name: Mandarin.Build
          path: publish

      - name: "[Coverage] Upload to SonarCloud"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONARCLOUD_LOGIN: ${{ secrets.SONARCLOUD_LOGIN }}
        run: |
          ~/.dotnet/tools/dotnet-sonarscanner end /d:sonar.login="$SONARCLOUD_LOGIN"

      - name: "[Coverage] Upload to Coveralls"
        uses: coverallsapp/github-action@v1.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: "./coverage/coverage.info"


  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: "[Artifacts] Download build artifact"
        uses: actions/download-artifact@v1
        with:
          name: Mandarin.Build

      - name: "[Deploy] Set Version Environment Variable"
        run: echo "::set-env name=GitVersion_NuGetVersionV2::$(cat Mandarin.Build/Version.txt)"

      - name: "[Deploy] octo pack"
        uses: docker://octopusdeploy/octo:7.1.3
        with:
          args: pack --id Mandarin --version ${{ env.GitVersion_NuGetVersionV2 }} --format zip --basePath Mandarin.Build

      - name: "[Deploy] octo push"
        uses: docker://octopusdeploy/octo:7.1.3
        with:
          args: push --package Mandarin.${{ env.GitVersion_NuGetVersionV2 }}.zip --replace-existing --server ${{ secrets.OCTOPUS_SERVER_URL }} --apiKey ${{ secrets.OCTOPUS_TOKEN }}
