name: Build

on:
  push:
  pull_request:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: password
        ports:
          - 5555:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: "[Setup] Checkout Repository"
        uses: actions/checkout@v1

      - name: "[Setup] Ensure 'master' branch exists"
        run: |
          git fetch --tags
          git branch --create-reflog master origin/master

      - name: "[Setup] Create GitVersion"
        uses: docker://gittools/gitversion:5.6.1-alpine.3.12-x64-3.1
        with:
          args: /github/workspace /nofetch /output buildserver

      - name: "[Setup] Install .NET Core"
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100

      - name: "[Setup] Install node"
        if: github.event_name == 'release'
        uses: actions/setup-node@v1
        with:
          node-version: '16.x'

      - name: "[Setup] Install gulp"
        if: github.event_name == 'release'
        run: npm install -g gulp-cli

      - name: "[Build] npm install"
        if: github.event_name == 'release'
        working-directory: src/Mandarin/
        run: npm ci

      - name: "[Build] NuGet Restore"
        run: dotnet restore

      - name: "[Build] Build Solution"
        run: |
          dotnet build \
            --no-restore \
            --configuration Release \
            /p:VersionPrefix=$GitVersion_MajorMinorPatch \
            /p:VersionSuffix=$GitVersion_PreReleaseLabel \
            /p:AssemblyVersion=$GitVersion_AssemblySemVer \
            /p:FileVersion=$GitVersion_AssemblySemFileVer \
            /p:InformationalVersion=$GitVersion_InformationalVersion \
            /p:RepositoryBranch=${GITHUB_REF#refs/heads/} \
            /p:RepositoryCommit=$GITHUB_SHA

      - name: "[Test] Run Tests"
        run: dotnet test --no-build --configuration Release

      - name: "[Test] Generate Report"
        uses: danielpalme/ReportGenerator-GitHub-Action@4.8.12
        if: success() || failure()
        with:
          reports: coverage/*.opencover.xml
          targetdir: tests/reports
          reporttypes: Html;lcov
          verbosity: Info

      - name: "[Coverage] Upload test reports artifact"
        uses: actions/upload-artifact@v1
        if: success() || failure()
        with:
          name: Mandarin.TestReports
          path: tests/reports

      - name: "[Deploy] Publish build"
        if: github.event_name == 'release'
        run: |
          dotnet publish src/Mandarin/Mandarin.csproj \
            --output ./publish \
            --configuration Release \
            --runtime linux-x64 \
            --self-contained true \
            /p:VersionPrefix=$GitVersion_MajorMinorPatch \
            /p:VersionSuffix=$GitVersion_PreReleaseLabel \
            /p:AssemblyVersion=$GitVersion_AssemblySemVer \
            /p:FileVersion=$GitVersion_AssemblySemFileVer \
            /p:InformationalVersion=$GitVersion_InformationalVersion \
            /p:RepositoryBranch=${GITHUB_REF#refs/heads/} \
            /p:RepositoryCommit=$GITHUB_SHA
          echo $GitVersion_NuGetVersionV2 > publish/Version.txt

      - name: "[Deploy] Create Octopus BuildInformation.json"
        if: github.event_name == 'release'
        uses: xo-energy/action-octopus-build-information@v1.1.0
        with:
          octopus_api_key: ${{ secrets.OCTOPUS_TOKEN }}
          octopus_server: ${{ secrets.OCTOPUS_SERVER_URL }}
          octopus_project: Mandarin
          output_path: publish

      - name: "[Deploy] Upload build artifact"
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v1
        with:
          name: Mandarin.Build
          path: publish

      - name: "[Coverage] Upload to Coveralls"
        uses: coverallsapp/github-action@v1.1.1
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: "./tests/reports/lcov.info"


  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: "[Artifacts] Download build artifact"
        uses: actions/download-artifact@v1
        with:
          name: Mandarin.Build

      - name: "[Deploy] Set Version Environment Variable"
        run: echo "GitVersion_NuGetVersionV2=$(cat Mandarin.Build/Version.txt)" >> $GITHUB_ENV

      - name: "[Metadata] octo build-information"
        uses: docker://octopusdeploy/octo:7.4.3275
        with:
          args: build-information --package-id Mandarin --version ${{ env.GitVersion_NuGetVersionV2 }} --file Mandarin.Build/buildInformation.json --server ${{ secrets.OCTOPUS_SERVER_URL }} --apiKey ${{ secrets.OCTOPUS_TOKEN }}

      - name: "[Deploy] octo pack"
        uses: docker://octopusdeploy/octo:7.4.3275
        with:
          args: pack --id Mandarin --version ${{ env.GitVersion_NuGetVersionV2 }} --format zip --basePath Mandarin.Build

      - name: "[Deploy] octo push"
        uses: docker://octopusdeploy/octo:7.4.3275
        with:
          args: push --package Mandarin.${{ env.GitVersion_NuGetVersionV2 }}.zip --replace-existing --server ${{ secrets.OCTOPUS_SERVER_URL }} --apiKey ${{ secrets.OCTOPUS_TOKEN }}
